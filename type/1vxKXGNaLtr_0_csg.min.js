var CSG=function(){this.polygons=[]};CSG.fromPolygons=function(n){var t=new CSG;return t.polygons=n,t},CSG.prototype={clone:function(){var n=new CSG;return n.polygons=this.polygons.map(function(n){return n.clone()}),n},toPolygons:function(){return this.polygons},union:function(n){var t=new CSG.Node(this.clone().polygons),o=new CSG.Node(n.clone().polygons);return t.clipTo(o),o.clipTo(t),o.invert(),o.clipTo(t),o.invert(),t.build(o.allPolygons()),CSG.fromPolygons(t.allPolygons())},subtract:function(n){var t=new CSG.Node(this.clone().polygons),o=new CSG.Node(n.clone().polygons);return t.invert(),t.clipTo(o),o.clipTo(t),o.invert(),o.clipTo(t),o.invert(),t.build(o.allPolygons()),t.invert(),CSG.fromPolygons(t.allPolygons())},intersect:function(n){var t=new CSG.Node(this.clone().polygons),o=new CSG.Node(n.clone().polygons);return t.invert(),o.clipTo(t),o.invert(),t.clipTo(o),o.clipTo(t),t.build(o.allPolygons()),t.invert(),CSG.fromPolygons(t.allPolygons())},inverse:function(){var n=this.clone();return n.polygons.map(function(n){n.flip()}),n}},CSG.cube=function(n){n=n||{};var t=new CSG.Vector(n.center||[0,0,0]),o=n.radius?n.radius.length?n.radius:[n.radius,n.radius,n.radius]:[1,1,1];return CSG.fromPolygons([[[0,4,6,2],[-1,0,0]],[[1,3,7,5],[1,0,0]],[[0,1,5,4],[0,-1,0]],[[2,6,7,3],[0,1,0]],[[0,2,3,1],[0,0,-1]],[[4,5,7,6],[0,0,1]]].map(function(n){return new CSG.Polygon(n[0].map(function(i){var e=new CSG.Vector(t.x+o[0]*(2*!!(1&i)-1),t.y+o[1]*(2*!!(2&i)-1),t.z+o[2]*(2*!!(4&i)-1));return new CSG.Vertex(e,new CSG.Vector(n[1]))}))}))},CSG.sphere=function(n){function t(n,t){n*=2*Math.PI,t*=Math.PI;var s=new CSG.Vector(Math.cos(n)*Math.sin(t),Math.cos(t),Math.sin(n)*Math.sin(t));o.push(new CSG.Vertex(i.plus(s.times(e)),s))}n=n||{};for(var o,i=new CSG.Vector(n.center||[0,0,0]),e=n.radius||1,s=n.slices||16,r=n.stacks||8,l=[],h=0;s>h;h++)for(var c=0;r>c;c++)o=[],t(h/s,c/r),c>0&&t((h+1)/s,c/r),r-1>c&&t((h+1)/s,(c+1)/r),t(h/s,(c+1)/r),l.push(new CSG.Polygon(o));return CSG.fromPolygons(l)},CSG.cylinder=function(n){function t(n,t,i){var r=2*t*Math.PI,h=c.times(Math.cos(r)).plus(a.times(Math.sin(r))),u=o.plus(e.times(n)).plus(h.times(s)),p=h.times(1-Math.abs(i)).plus(l.times(i));return new CSG.Vertex(u,p)}n=n||{};for(var o=new CSG.Vector(n.start||[0,-1,0]),i=new CSG.Vector(n.end||[0,1,0]),e=i.minus(o),s=n.radius||1,r=n.slices||16,l=e.unit(),h=Math.abs(l.y)>.5,c=new CSG.Vector(h,!h,0).cross(l).unit(),a=c.cross(l).unit(),u=new CSG.Vertex(o,l.negated()),p=new CSG.Vertex(i,l.unit()),f=[],y=0;r>y;y++){var g=y/r,S=(y+1)/r;f.push(new CSG.Polygon([u,t(0,g,-1),t(0,S,-1)])),f.push(new CSG.Polygon([t(0,S,0),t(0,g,0),t(1,g,0),t(1,S,0)])),f.push(new CSG.Polygon([p,t(1,S,1),t(1,g,1)]))}return CSG.fromPolygons(f)},CSG.Vector=function(n,t,o){3==arguments.length?(this.x=n,this.y=t,this.z=o):"x"in n?(this.x=n.x,this.y=n.y,this.z=n.z):(this.x=n[0],this.y=n[1],this.z=n[2])},CSG.Vector.prototype={clone:function(){return new CSG.Vector(this.x,this.y,this.z)},negated:function(){return new CSG.Vector(-this.x,-this.y,-this.z)},plus:function(n){return new CSG.Vector(this.x+n.x,this.y+n.y,this.z+n.z)},minus:function(n){return new CSG.Vector(this.x-n.x,this.y-n.y,this.z-n.z)},times:function(n){return new CSG.Vector(this.x*n,this.y*n,this.z*n)},dividedBy:function(n){return new CSG.Vector(this.x/n,this.y/n,this.z/n)},dot:function(n){return this.x*n.x+this.y*n.y+this.z*n.z},lerp:function(n,t){return this.plus(n.minus(this).times(t))},length:function(){return Math.sqrt(this.dot(this))},unit:function(){return this.dividedBy(this.length())},cross:function(n){return new CSG.Vector(this.y*n.z-this.z*n.y,this.z*n.x-this.x*n.z,this.x*n.y-this.y*n.x)}},CSG.Vertex=function(n,t){this.pos=new CSG.Vector(n),this.normal=new CSG.Vector(t)},CSG.Vertex.prototype={clone:function(){return new CSG.Vertex(this.pos.clone(),this.normal.clone())},flip:function(){this.normal=this.normal.negated()},interpolate:function(n,t){return new CSG.Vertex(this.pos.lerp(n.pos,t),this.normal.lerp(n.normal,t))}},CSG.Plane=function(n,t){this.normal=n,this.w=t},CSG.Plane.EPSILON=1e-5,CSG.Plane.fromPoints=function(n,t,o){var i=t.minus(n).cross(o.minus(n)).unit();return new CSG.Plane(i,i.dot(n))},CSG.Plane.prototype={clone:function(){return new CSG.Plane(this.normal.clone(),this.w)},flip:function(){this.normal=this.normal.negated(),this.w=-this.w},splitPolygon:function(n,t,o,i,e){for(var s=0,r=1,l=2,h=3,c=0,a=[],u=0;u<n.vertices.length;u++){var p=this.normal.dot(n.vertices[u].pos)-this.w,f=p<-CSG.Plane.EPSILON?l:p>CSG.Plane.EPSILON?r:s;c|=f,a.push(f)}switch(c){case s:(this.normal.dot(n.plane.normal)>0?t:o).push(n);break;case r:i.push(n);break;case l:e.push(n);break;case h:for(var y=[],g=[],u=0;u<n.vertices.length;u++){var S=(u+1)%n.vertices.length,C=a[u],G=a[S],v=n.vertices[u],w=n.vertices[S];if(C!=l&&y.push(v),C!=r&&g.push(C!=l?v.clone():v),(C|G)==h){var p=(this.w-this.normal.dot(v.pos))/this.normal.dot(w.pos.minus(v.pos)),P=v.interpolate(w,p);y.push(P),g.push(P.clone())}}y.length>=3&&i.push(new CSG.Polygon(y,n.shared)),g.length>=3&&e.push(new CSG.Polygon(g,n.shared))}}},CSG.Polygon=function(n,t){this.vertices=n,this.shared=t,this.plane=CSG.Plane.fromPoints(n[0].pos,n[1].pos,n[2].pos)},CSG.Polygon.prototype={clone:function(){var n=this.vertices.map(function(n){return n.clone()});return new CSG.Polygon(n,this.shared)},flip:function(){this.vertices.reverse().map(function(n){n.flip()}),this.plane.flip()}},CSG.Node=function(n){this.plane=null,this.front=null,this.back=null,this.polygons=[],n&&this.build(n)},CSG.Node.prototype={clone:function(){var n=new CSG.Node;return n.plane=this.plane&&this.plane.clone(),n.front=this.front&&this.front.clone(),n.back=this.back&&this.back.clone(),n.polygons=this.polygons.map(function(n){return n.clone()}),n},invert:function(){for(var n=0;n<this.polygons.length;n++)this.polygons[n].flip();this.plane.flip(),this.front&&this.front.invert(),this.back&&this.back.invert();var t=this.front;this.front=this.back,this.back=t},clipPolygons:function(n){if(!this.plane)return n.slice();for(var t=[],o=[],i=0;i<n.length;i++)this.plane.splitPolygon(n[i],t,o,t,o);return this.front&&(t=this.front.clipPolygons(t)),o=this.back?this.back.clipPolygons(o):[],t.concat(o)},clipTo:function(n){this.polygons=n.clipPolygons(this.polygons),this.front&&this.front.clipTo(n),this.back&&this.back.clipTo(n)},allPolygons:function(){var n=this.polygons.slice();return this.front&&(n=n.concat(this.front.allPolygons())),this.back&&(n=n.concat(this.back.allPolygons())),n},build:function(n){if(n.length){this.plane||(this.plane=n[0].plane.clone());for(var t=[],o=[],i=0;i<n.length;i++)this.plane.splitPolygon(n[i],this.polygons,this.polygons,t,o);t.length&&(this.front||(this.front=new CSG.Node),this.front.build(t)),o.length&&(this.back||(this.back=new CSG.Node),this.back.build(o))}}};